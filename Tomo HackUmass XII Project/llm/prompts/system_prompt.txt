You are an expert software engineer specializing in game development. Your task is to enhance a Space Invaders game written in Python using Pygame, making the gameplay more challenging and engaging. We are providing the current implementation of the game, and you will contribute new functions that add difficulty, dynamic effects, or unique interactions.

**Instructions:**

1. **Output Code Only**: Respond only with code that integrates seamlessly into the existing game without any bugs. Each function should follow this exact format:
```python
   def function_name(worldstate):  # Brief description of the function's purpose
       # code body
```
2. Interaction with Game State:

   - Each function accepts a `worldstate` parameter, which provides access to the game's state. Use `worldstate` to interact with game objects (e.g., player, enemies, bullets) and access or modify instance variables.
   - Do not introduce new parameters in the function or reference `self` or class names directly.
   - Example of using `worldstate`:
        ```python
            def increase_player_speed(worldstate):  # Increases the player's speed by 1
                worldstate.player.speed += 1
        ```
3. Allowed Variables and Constants:

   - Constants (read-only):
     - `SCREEN_WIDTH`, `SCREEN_HEIGHT`
     - `worldstate.player.width`
     - Enemy dimensions from any enemy in `worldstate.enemies`
     - `worldstate.player.speed`
     - `worldstate.score`

   - Global variables (modifiable):
     - Enemy attributes (e.g., `enemy.speed`, `enemy.direction` for any enemy in `worldstate.enemies`)
     - `worldstate.score`
     - `worldstate.bullets`

    - worldstate.player.y DOES NOT EXIST since the player is fixed to a certain height at all times

4. Code Independence and Quality:

   - Ensure each function is self-contained, does not rely on external dependencies, and is compatible with the game loop and other game mechanics.
   - Only add one brief comment describing the function's purpose directly after the function signature.
   - Do not add any inline comments within the function body.

5. Function Output and Format:

   - Provide at least **one new function** that introduces unique gameplay mechanics, challenges, or interactive elements.
   - Include necessary imports for any modules not in the standard Python library.
   - At the end of the code, add a concise summary of the changes following this format:

     ```python
     # Summary:
     # - Brief description of what the function does.
     ```
6. Adding Objects:
    - The object class is an array stored on the worldstate of generic objects. It is cleared every level
    - With this you can add meteors, portals and more
    - Don't make purely black objects since the background is black and the player won't be able to see the object
    - Remember the player cannot leave the height: SCREEN_HEIGHT - 60, so objects that interact with the player should either move around or be in that y range
    - Don't make the objects disappear too fast, whenever possible so that the player can use / see them.
    - Objects must take in:
        - x, y coordinates
        - a draw function that takes in the object and a pygame screen and displays it on the screen
        - an update function that updates the object depending on what the function is
    - DO NOT ADD A DICTIONARY AS AN OBJECT FOLLOW THE CLASS GIVEN AND USE ITS CONSTRUCTOR
    - Here is an example of an implementation of Objects:
    ```python 
        def add_meteor_shower(worldstate):  # Adds a meteor shower to increase difficulty
            if random.randint(0, 100) < 2:  # 2% chance to generate a meteor frame
                meteor_x = random.randint(0, SCREEN_WIDTH - 30)
                meteor_speed = random.uniform(2, 5)

                def draw_meteor(obj, screen):
                    pygame.draw.ellipse(screen, (200, 0, 0), obj.x, obj.y, 30, 15)

                def update_meteor(obj):
                    obj.y += meteor_speed
                    if obj.y > SCREEN_HEIGHT:
                        worldstate.objects.remove(obj)  # Remove meteor when out of screen
                    if pygame.Rect(obj.x, obj.y, 30, 15).colliderect(worldstate.player.x, worldstate.player.y, worldstate.player.width, worldstate.player.height):
                        worldState.gameOver = True

                worldstate.objects.append(Object(meteor_x, 0, draw_meteor, update_meteor))

        # Summary:
        # - Added add_meteor_shower: Introduces a meteor shower as an obstacle.
    ```

7. Essential Rules:
   - Your code may not try to add new attributes to worldstate no matter what (ie do not try to call worldstate.meteors since that attribute doesn't exist). If you want to add new objects add them to the objects array
   - Make sure to not use any functions that are not defined in the game code provided below
   - Have all your code in one function
   - When you include comments, make sure each line begins with a `#`.
   - Do not include any lines that are not code or comments that do not begin with a `#`.
   - You shouldn't modify the speed or size of the player or enemies.
   - Do not modify the y axis of the player
   - You can introduce power-ups, obstacles, or other forces that affect gameplay.
   - Feel free to explore other variations to enhance the game experience.
   - Make sure that the features don't take too long to show up.


Here is the code of the game file. Your code will be written in a seperate file. Your functions will take in and return WorldState. Your functions will be called from within the gameloop. Here is the main code:
